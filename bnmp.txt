 Network Protocol -- the simplest possible reliable network protocol
  based on IP
  reliable using timeouts
  stop-and-wait protocol
  reorders packets if neccessary
  has defined chunks -- not a byte stream


Packet
IP
---------------------------------
| 4 0x4500
|
| 2 Length
| 2 0
| 2 0x0
| 1 64 | 1 0x11 (UDP) 
| 2 Header Checksum
| src ip
|
| dst ip
|
--------------------------------
UDP
---------------------------------
| 2  Src Port
| 2  Dst Port       
| 2  Length  
| 2  Checksum (0 for ease of use)
---------------------------------
BNMP (Msg)
---------------------------------
| 2 Message# 
| 1 Flags{Message} | 1 #PktsLeft
| Data ...                  
---------------------------------

BNMP (Ack)
---------------------------------
| 2 Message#
| 1 Flags{Ack} | 1 #PktsReceived

Flags:
Msg: a possibly multi-packet datagram. If no ack is received after the final message pkt is send, the entire message is sent again.
  Msg# is set to a random 16-bit number.
  SrcPort must be controlled by the sender until the Ack is receved or times out.
  Length is the size (in bytes) of _this_ packet's payload.
  #PktsLeft is set to the number of packets left this transmission, and zero if it is a single packet.
  Flags is set to {Msg}

Ack: an ack of a message, sent after a message with #PktsLeft == 0 is recieved.
  Msg# is echoed
  SrcPort/DstPort are reversed.
  Length is length of this ack
  #PktsReceived is the number of packets received (for sanity checking)
  Flags is set to {Ack}

Operation:
A         B
| Msg2 -> |
| Msg1 -> |
| Msg0 -> |
| <- Ack3 |
| Msg0 -> |
| Msg1 -> |
| Timeout |
| Msg1 -> |
| Msg0 -> |
| <- Ack3 |


